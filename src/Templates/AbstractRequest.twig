<?php
namespace {{ namespace }}\Message\Request;

use {{ namespace }}\Message\Request\RequestInterface;
use {{ namespace }}\Exception\ValidationException;
use {{ namespace }}\Message\Response\ResponseInterface;

abstract class AbstractRequest implements RequestInterface
{

    protected $test_mode = false;
    protected $api_version;
    protected $method = 'GET';
    
    abstract protected function getData() : array ;

    public function send() : ResponseInterface {
        return $this->sendData($this->getData());
    }

    abstract protected function validate();

    abstract protected function sendData(array $data) : ResponseInterface;

    abstract protected function sendRequest(string $method, string $endpoint, array $headers = [], array $data = [] );

    abstract protected function setParameter(string $key, $value);
    abstract protected function createResponse(array $data) : ResponseInterface;

    public function setApiVersion(int $value) {
        $this->api_version = $value;
    }

    public function getApiVersion() :int {
        return $this->api_version;
    }

    abstract public function getEndpointUrl(): string; 

    public function getTestMode(): bool {
        return $this->test_mode;
    }

    public function setTestMode(bool $mode) {
        $this->test_mode = $mode;
    }

    abstract public function getParameters() : array;

    abstract public function initialize(array $parameters);
 }