<?php
namespace {{ namespace }}\Message\Request;

use {{ namespace }}\Message\Request\RequestInterface;
use {{ namespace }}\Exception\ValidationException;
use {{ namespace }}\Message\Response\ResponseInterface;

abstract class AbstractRequest implements RequestInterface
{
    abstract protected function getData() : array ;

    public function send() : ResponseInterface {
        return $this->sendData($this->getData());
    }

    abstract protected function validate();

    abstract protected function sendData(array $data) : ResponseInterface;

    abstract protected function sendRequest(string $method, string $endpoint, array $headers = [], array $data = [] );

    abstract protected function setParameter(string $key, $value);
    abstract protected function createResponse(array $data) : ResponseInterface;

    abstract protected function getApiVersion() : int;
    
    public function setEndpoint(string $value) {
        $this->endpoint = $value;
    }
    
    abstract protected function getEndpointUrl(?array $params = []): string; 

    abstract public function getTestMode(): bool;

    public function setTestMode( $value = true) {
        $this->test_mode = $value;
    }

    abstract public function getParameters() : array;

    abstract public function initialize(array $parameters);
 }